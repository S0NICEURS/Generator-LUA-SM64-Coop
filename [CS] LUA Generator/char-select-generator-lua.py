import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog, Scrollbar, Frame
import os

class LuaGeneratorApp:
    def __init__(self, master):
        self.master = master
        self.master.title("[CS] Generator LUA (Experimental) ")
        self.master.geometry("900x600")

        self.characters = []

        self.create_widgets()

    def create_widgets(self):
        # Frame for pack name
        pack_name_frame = tk.Frame(self.master)
        pack_name_frame.pack(pady=10, fill=tk.X)

        tk.Label(pack_name_frame, text="Pack Name:").pack(side=tk.LEFT, padx=5)
        self.pack_name_entry = tk.Entry(pack_name_frame, width=50)
        self.pack_name_entry.pack(side=tk.LEFT, padx=5)
        self.pack_name_entry.insert(0, "Custom Character Pack")  # Default name

        # Frame for buttons
        button_frame = tk.Frame(self.master)
        button_frame.pack(pady=10, fill=tk.X)

        self.add_character_button = tk.Button(button_frame, text="Add Character", command=self.add_character)
        self.add_character_button.pack(side=tk.LEFT, padx=5)

        self.generate_button = tk.Button(button_frame, text="Generate main.lua", command=self.generate_lua_file)
        self.generate_button.pack(side=tk.LEFT, padx=5)

        # Frame for character list and edit
        self.character_frame = tk.Frame(self.master)
        self.character_frame.pack(pady=10, fill=tk.BOTH, expand=True)

        self.canvas = tk.Canvas(self.character_frame)
        self.scrollbar = Scrollbar(self.character_frame, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.scrollbar.pack(side="right", fill="y")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.canvas.config(yscrollcommand=self.scrollbar.set)

    def add_character(self):
        new_character = CharacterConfig(self)
        if new_character.name:  # Add character only if a valid name is provided
            self.characters.append(new_character)
            self.display_characters()

    def display_characters(self):
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()

        for char in self.characters:
            char_frame = tk.Frame(self.scrollable_frame)
            char_frame.pack(pady=5, fill=tk.X)

            tk.Label(char_frame, text=f"Name: {char.name}").pack(anchor=tk.W, padx=5)
            edit_button = tk.Button(char_frame, text="Edit", command=lambda c=char: self.edit_character(c))
            edit_button.pack(side=tk.LEFT, padx=5)

            delete_button = tk.Button(char_frame, text="Delete", command=lambda c=char: self.delete_character(c))
            delete_button.pack(side=tk.LEFT, padx=5)

    def edit_character(self, character):
        # Open a new window to edit character details
        CharacterEditWindow(self, character)

    def delete_character(self, character):
        if messagebox.askokcancel("Confirm Delete", f"Are you sure you want to delete character '{character.name}'?"):
            self.characters.remove(character)
            self.display_characters()

    def generate_lua_file(self):
        lua_file_path = filedialog.asksaveasfilename(defaultextension=".lua", filetypes=[("Lua files", "*.lua")])

        if not lua_file_path:
            return

        try:
            with open(lua_file_path, "w") as file:
                file.write(self.generate_lua_code())
            messagebox.showinfo("Success", f"Lua file generated successfully:\n{lua_file_path}")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred: {e}")

    def generate_lua_code(self):
        pack_name = self.pack_name_entry.get()
        lua_code = f"-- name: [CS] {pack_name}\n"
        lua_code += "-- description: A Template for Character Select to build off of when making your own pack!\\#ff7777\\This Pack requires Character Select to use as a Library!"

        lua_code += "--[[API Documentation for Character Select can be found below:https://github.com/Squishy6094/character-select-coop/wiki/API-Documentation, Use this if you're curious on how anything here works, code generated by tool Soniceurs (and ???)"

        for char in self.characters:
            lua_code += f"local E_MODEL_{char.name.upper()} = smlua_model_util_get_id('{char.model_file}')\n"
            lua_code += f"local TEX_CUSTOM_ICON = get_texture_info('{char.icon_file}')\n\n"

            lua_code += f"local TEXT_MOD_NAME = \"{char.name}\"\n\n"

            lua_code += "local VOICETABLE_CHAR = {\n"
            for sound_id, file in char.voice_files.items():
                lua_code += f"    [{sound_id}] = '{file}',\n"
            lua_code += "}\n\n"

            lua_code += "if _G.charSelectExists then\n"
            lua_code += f"    CT_CHAR = _G.charSelect.character_add(\"{char.name}\", {{\"{char.description}\"}}, \"{char.creator}\", {{r = {char.color[0]}, g = {char.color[1]}, b = {char.color[2]}}}, E_MODEL_{char.name.upper()}, CT_MARIO, TEX_CUSTOM_ICON)\n"
            lua_code += "    _G.charSelect.character_add_voice(E_MODEL_{char.name.upper()}, VOICETABLE_CHAR)\n"
            lua_code += "    hook_event(HOOK_CHARACTER_SOUND, function (m, sound)\n"
            lua_code += "        if _G.charSelect.character_get_voice(m) == VOICETABLE_CHAR then return _G.charSelect.voice.sound(m, sound) end\n"
            lua_code += "    end)\n"
            lua_code += "    hook_event(HOOK_MARIO_UPDATE, function (m)\n"
            lua_code += "        if _G.charSelect.character_get_voice(m) == VOICETABLE_CHAR then return _G.charSelect.voice.snore(m) end\n"
            lua_code += "    end)\n"
            lua_code += "else\n"
            lua_code += "    djui_popup_create(\"\\#ffffdc\\\n\" .. TEXT_MOD_NAME .. \"\nRequires the Character Select Mod\nto use as a Library!\\n\\nPlease turn on the Character Select Mod\\nand Restart the Room!\", 6)\n"
            lua_code += "end\n\n"

        return lua_code

class CharacterConfig:
    CHAR_SOUND_IDS = [
        "CHAR_SOUND_ATTACKED",
        "CHAR_SOUND_DOH",
        "CHAR_SOUND_DROWNING",
        "CHAR_SOUND_DYING",
        "CHAR_SOUND_GROUND_POUND_WAH",
        "CHAR_SOUND_HAHA",
        "CHAR_SOUND_HAHA_2",
        "CHAR_SOUND_HERE_WE_GO",
        "CHAR_SOUND_HOOHOO",
        "CHAR_SOUND_MAMA_MIA",
        "CHAR_SOUND_OKEY_DOKEY",
        "CHAR_SOUND_ON_FIRE",
        "CHAR_SOUND_OOOF",
        "CHAR_SOUND_OOOF2",
        "CHAR_SOUND_PUNCH_HOO",
        "CHAR_SOUND_PUNCH_WAH",
        "CHAR_SOUND_PUNCH_YAH",
        "CHAR_SOUND_SO_LONGA_BOWSER",
        "CHAR_SOUND_TWIRL_BOUNCE",
        "CHAR_SOUND_WAAAOOOW",
        "CHAR_SOUND_WAH2",
        "CHAR_SOUND_WHOA",
        "CHAR_SOUND_YAHOO",
        "CHAR_SOUND_YAHOO_WAHA_YIPPEE",
        "CHAR_SOUND_YAH_WAH_HOO",
        "CHAR_SOUND_YAWNING"
    ]

    def __init__(self, app):
        self.app = app
        self.name = simpledialog.askstring("Character Name", "Enter the character name:")
        self.model_file = None
        self.icon_file = None
        self.voice_files = {}
        self.color = [255, 255, 255]
        self.description = "Default description"
        self.creator = "Default creator"

        if not self.name:
            return

        self.setup_widgets()

    def setup_widgets(self):
        self.window = tk.Toplevel(self.app.master)
        self.window.title("Character Configuration")

        main_frame = tk.Frame(self.window)
        main_frame.pack(pady=10, fill=tk.BOTH, expand=True)

        # Frame for character details
        detail_frame = tk.Frame(main_frame)
        detail_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)

        tk.Label(detail_frame, text="Name:").pack(pady=5)
        self.name_entry = tk.Entry(detail_frame)
        self.name_entry.insert(0, self.name)
        self.name_entry.pack(pady=5)

        tk.Label(detail_frame, text="Description:").pack(pady=5)
        self.description_entry = tk.Entry(detail_frame)
        self.description_entry.insert(0, self.description)
        self.description_entry.pack(pady=5)

        tk.Label(detail_frame, text="Creator:").pack(pady=5)
        self.creator_entry = tk.Entry(detail_frame)
        self.creator_entry.insert(0, self.creator)
        self.creator_entry.pack(pady=5)

        tk.Label(detail_frame, text="Color (RGB):").pack(pady=5)
        self.color_entry = tk.Entry(detail_frame)
        self.color_entry.insert(0, ' '.join(map(str, self.color)))
        self.color_entry.pack(pady=5)

        # Frame for file selections
        file_frame = tk.Frame(main_frame)
        file_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)

        tk.Label(file_frame, text="Model File:").pack(pady=5)
        self.model_button = tk.Button(file_frame, text="Browse", command=self.browse_model)
        self.model_button.pack(pady=5)

        tk.Label(file_frame, text="Icon File:").pack(pady=5)
        self.icon_button = tk.Button(file_frame, text="Browse", command=self.browse_icon)
        self.icon_button.pack(pady=5)

        tk.Label(file_frame, text="Voice Files:").pack(pady=5)
        self.voice_frame = tk.Frame(file_frame)
        self.voice_frame.pack(pady=5, fill=tk.BOTH, expand=True)

        self.voice_entries = {}
        for sound_id in CharacterConfig.CHAR_SOUND_IDS:
            frame = tk.Frame(self.voice_frame)
            frame.pack(pady=2, fill=tk.X)

            tk.Label(frame, text=f"{sound_id}:").pack(side=tk.LEFT, padx=5)
            entry = tk.Entry(frame)
            entry.pack(side=tk.LEFT, padx=5, expand=True)
            self.voice_entries[sound_id] = entry

            browse_button = tk.Button(frame, text="Browse", command=lambda id=sound_id: self.browse_voice(id))
            browse_button.pack(side=tk.LEFT, padx=5)

        tk.Button(self.window, text="Save", command=self.save_character).pack(pady=10)

    def browse_model(self):
        file = filedialog.askopenfilename(filetypes=[("Binary files", "*.bin")])
        if file:
            self.model_file = file
            self.model_button.config(text=os.path.basename(file))

    def browse_icon(self):
        file = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg")])
        if file:
            self.icon_file = file
            self.icon_button.config(text=os.path.basename(file))

    def browse_voice(self, sound_id):
        file = filedialog.askopenfilename(filetypes=[("Audio files", "*.mp3;*.ogg")])
        if file:
            self.voice_files[sound_id] = os.path.basename(file)
            self.voice_entries[sound_id].delete(0, tk.END)
            self.voice_entries[sound_id].insert(0, os.path.basename(file))

    def save_character(self):
        if not self.model_file:
            messagebox.showerror("Error", "Model file is required!")
            return

        if not self.icon_file:
            messagebox.showerror("Error", "Icon file is required!")
            return

        self.name = self.name_entry.get()
        self.model_file = os.path.basename(self.model_file)
        self.icon_file = os.path.basename(self.icon_file)
        self.voice_files = {id: entry.get() for id, entry in self.voice_entries.items()}

        self.description = self.description_entry.get()
        self.creator = self.creator_entry.get()

        color_str = self.color_entry.get().split()
        self.color = [int(c) for c in color_str] if len(color_str) == 3 else self.color

        self.window.destroy()

class CharacterEditWindow:
    def __init__(self, app, character):
        self.app = app
        self.character = character
        self.window = tk.Toplevel(app.master)
        self.window.title("Edit Character")

        self.setup_widgets()

    def setup_widgets(self):
        main_frame = tk.Frame(self.window)
        main_frame.pack(pady=10, fill=tk.BOTH, expand=True)

        # Frame for character details
        detail_frame = tk.Frame(main_frame)
        detail_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)

        tk.Label(detail_frame, text="Name:").pack(pady=5)
        self.name_entry = tk.Entry(detail_frame)
        self.name_entry.insert(0, self.character.name)
        self.name_entry.pack(pady=5)

        tk.Label(detail_frame, text="Description:").pack(pady=5)
        self.description_entry = tk.Entry(detail_frame)
        self.description_entry.insert(0, self.character.description)
        self.description_entry.pack(pady=5)

        tk.Label(detail_frame, text="Creator:").pack(pady=5)
        self.creator_entry = tk.Entry(detail_frame)
        self.creator_entry.insert(0, self.character.creator)
        self.creator_entry.pack(pady=5)

        tk.Label(detail_frame, text="Color (RGB):").pack(pady=5)
        self.color_entry = tk.Entry(detail_frame)
        self.color_entry.insert(0, ' '.join(map(str, self.character.color)))
        self.color_entry.pack(pady=5)

        # Frame for file selections
        file_frame = tk.Frame(main_frame)
        file_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)

        tk.Label(file_frame, text="Model File:").pack(pady=5)
        self.model_button = tk.Button(file_frame, text="Browse", command=self.browse_model)
        self.model_button.pack(pady=5)

        tk.Label(file_frame, text="Icon File:").pack(pady=5)
        self.icon_button = tk.Button(file_frame, text="Browse", command=self.browse_icon)
        self.icon_button.pack(pady=5)

        tk.Label(file_frame, text="Voice Files:").pack(pady=5)
        self.voice_frame = tk.Frame(file_frame)
        self.voice_frame.pack(pady=5, fill=tk.BOTH, expand=True)

        self.voice_entries = {}
        for sound_id in CharacterConfig.CHAR_SOUND_IDS:
            frame = tk.Frame(self.voice_frame)
            frame.pack(pady=2, fill=tk.X)

            tk.Label(frame, text=f"{sound_id}:").pack(side=tk.LEFT, padx=5)
            entry = tk.Entry(frame)
            entry.pack(side=tk.LEFT, padx=5, expand=True)
            self.voice_entries[sound_id] = entry

            browse_button = tk.Button(frame, text="Browse", command=lambda id=sound_id: self.browse_voice(id))
            browse_button.pack(side=tk.LEFT, padx=5)

        self.load_character_data()
        tk.Button(self.window, text="Save", command=self.save_character).pack(pady=10)

    def load_character_data(self):
        self.model_button.config(text=os.path.basename(self.character.model_file) if self.character.model_file else "Browse")
        self.icon_button.config(text=os.path.basename(self.character.icon_file) if self.character.icon_file else "Browse")

        for sound_id, file in self.character.voice_files.items():
            if sound_id in self.voice_entries:
                self.voice_entries[sound_id].insert(0, file)

    def browse_model(self):
        file = filedialog.askopenfilename(filetypes=[("Binary files", "*.bin")])
        if file:
            self.character.model_file = file
            self.model_button.config(text=os.path.basename(file))

    def browse_icon(self):
        file = filedialog.askopenfilename(filetypes=[("Image files", "*.png;*.jpg")])
        if file:
            self.character.icon_file = file
            self.icon_button.config(text=os.path.basename(file))

    def browse_voice(self, sound_id):
        file = filedialog.askopenfilename(filetypes=[("Audio files", "*.mp3;*.ogg")])
        if file:
            self.character.voice_files[sound_id] = os.path.basename(file)
            self.voice_entries[sound_id].delete(0, tk.END)
            self.voice_entries[sound_id].insert(0, os.path.basename(file))

    def save_character(self):
        self.character.name = self.name_entry.get()
        self.character.description = self.description_entry.get()
        self.character.creator = self.creator_entry.get()
        self.character.color = [int(c) for c in self.color_entry.get().split()]

        self.character.model_file = os.path.basename(self.character.model_file)
        self.character.icon_file = os.path.basename(self.character.icon_file)
        self.character.voice_files = {id: entry.get() for id, entry in self.voice_entries.items()}

        self.window.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = LuaGeneratorApp(root)
    root.mainloop()
